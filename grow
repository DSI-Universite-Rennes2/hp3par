#!/usr/bin/python -W ignore
import sys
import os
import ConfigParser
import urllib3

# this is a hack to get the hpe driver module
# and it's utils module on the search path.
cmd_folder = os.path.realpath(os.path.abspath("..") )
if cmd_folder not in sys.path:
     sys.path.insert(0, cmd_folder)

from hpe3parclient import client, exceptions

#config
config_file = "/etc/ganeti/extstorage/3par.conf"
config = ConfigParser.SafeConfigParser()
if not config.read(config_file):
  raise ConfigParser.Error("Unable to read config file")

host        = config.get('3par','host')
login       = config.get('3par','login')
password    = config.get('3par','password')
default_cpg = config.get('3par','default_cpg')
snap_cpg    = config.get('3par','snap_cpg')

def ReadEnv():
  """Read the mandatory enviromental variables
  """

  name = os.getenv("VOL_NAME")
  if name is None:
    sys.stderr.write('The environment variable VOL_NAME is missing.\n')
    sys.exit(1)

  size = int(os.getenv("VOL_SIZE"))
  if size is None:
    sys.stderr.write('The environment variable VOL_SIZE is missing.\n')
    sys.exit(1)


  new_size = int(os.getenv("VOL_NEW_SIZE"))
  if new_size is None:
    sys.stderr.write('The environment variable VOL_NEW_SIZE is missing.\n')
    sys.exit(1)

  return (name, size, new_size)


def main():
  sys.stderr.write('Creation started...\n')

  env = ReadEnv()

  if env is None:
    sys.stderr.write('Wrong environment. Aborting...\n')
    sys.exit(1)

  vv_name, vv_size, new_size = env


  sys.stderr.write('name: %s, size: %s, newsize: %s\n' % (vv_name, vv_size, new_size))

  cl = client.HPE3ParClient(host, False, False, None, True)

  try: 
    cl.login(login,password)
  except exceptions.HTTPUnauthorized as ex:
       pprint.pprint("Login Failed")
  
  try:
    amount = new_size - vv_size
    cl.growVolume(vv_name, amount)
  except exceptions.HTTPUnauthorized as ex:                                                                                                                                                                                    
       pprint.pprint("You must login first")                                                                                                                                                                                     
  except Exception as ex:                                                                                                                                                                                                      
       print(ex)

  cl.logout()


if __name__ == "__main__":
  sys.exit(main())

